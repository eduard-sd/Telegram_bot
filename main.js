const TelegramBot = require('node-telegram-bot-api');
const TOKEN = "869793649:AAGBDwsYi_yCpSQ5V7_qvaTUx08pVkOn2GQ";
const bot = new TelegramBot(TOKEN, {polling: true});
const keyboard = require('./keyboard/inlineKeyboard');
const pool = require('./connectDB').pgPool;
const cTable = require('console.table');

const keyboardDefault = keyboard.keyboardDefault();
const sendVCard = keyboard.sendVCard();
const keyboardBalloons = keyboard.keyboardBalloons();
const priceListKeyboard = keyboard.priceListKeyboard();
const classicBallonsKeyboard = keyboard.classicBallonsKeyboard();
const classicCircleBallonsKeyboard = keyboard.classicCircleBallonsKeyboard();
const foilBallonsKeyboard = keyboard.foilBallonsKeyboard();
const getPriceFromPhotoKeyboard = keyboard.getPriceFromPhotoKeyboard();
const faqKeyboard = keyboard.faqKeyboard();
const cartKeyboard = keyboard.cartKeyboard();
const profileKeyboard = keyboard.profileKeyboard();

let photoList = [];
const adminChatID = '1875888';
let previousMenu = '–®–∞—Ä—ã üéà';


//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
function addBackButton(previousMenu, customKeyboard) {
    let customKeyboardArray = customKeyboard.inline_keyboard;
    for (let i = 0; i < customKeyboardArray.length; i++) {
        if (i === customKeyboardArray.length - 1) {
            if (customKeyboardArray[i][0].text !== "‚¨Ö –ù–∞–∑–∞–¥") {
                customKeyboardArray[i].splice(0, 0, {text: "‚¨Ö –ù–∞–∑–∞–¥", callback_data: previousMenu})
            }
        }
    }
    return {inline_keyboard: customKeyboardArray};
}

//—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª—é—á–µ–π –æ–±—å–µ–∫—Ç–∞ objectKey –ø—Ä–∞–π—Å–ª–∏—Å—Ç–∞ –∏ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π customKeyboard
function addPriceListKeyButtons (objectValue, objectKey) {
    console.log('addPriceListKeyButtons')
    let arrayButtons = [];
    let temp = [];

    for(let k = 0; k < objectValue.length; k++) {
        let data = '';
        if (objectValue[k] && typeof objectValue[k] === 'boolean') {
            data = '–î–∞';
        } else if (!objectValue[k] && typeof objectValue[k] === 'boolean') {
            data = '–ù–µ—Ç';
        } else {
            data = objectValue[k]
        }

        temp.push({text: data,callback_data: objectKey+'.'+data});
        if((k+1) % 5 === 0) {
            arrayButtons.push(temp);
            temp = []
        } else if(k+1 === objectValue.length ) {
            arrayButtons.push(temp)
        }
    }
    return arrayButtons;
}

//—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
function concatButtons (fistkeyboard, secondkeyboard) {
    return {inline_keyboard: fistkeyboard.concat(secondkeyboard)};
}


bot.on('text', (msg) => {
    const chatValue = msg.chat;
    const chatId = msg.chat.id;
    const chatOpponent = chatValue.first_name ? chatValue.first_name : "–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç";

    console.log(chatOpponent);

    if (msg.text.toString() === "/start") {
        bot.sendMessage(
            chatId,
            `${chatOpponent}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫—Å–∫–∏–π –ø–æ–º–æ—à–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. –ü—Ä–æ—à—É —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
            {reply_markup: keyboardDefault}
        )
    }

    if (msg.text.toString() === "–®–∞—Ä—ã üéà") {
        // bot.sendPhoto(chatId, "https://avatars.mds.yandex.net/get-pdb/1681173/b1c1cbe3-c6ef-4662-af9e-fe3db83d1ec8/s1200");
        bot.sendMessage(
            chatId,
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571498410/TelegramBotSharoladya/sharolandiay_noxiev.png">–®–∞—Ä–æ–ª–∞–Ω–¥–∏—è</a>' + `\n${chatOpponent}, –≤—ã –Ω–∞–∂–∞–ª–∏ —à–∞—Ä—ã –≤–≤–æ–¥–Ω–∞—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å–ª—É–≥–∞–º`,
            {
                reply_markup: addBackButton(previousMenu, keyboardBalloons),
                parse_mode: "HTML"
            }
        );
        previousMenu = "–®–∞—Ä—ã üéà";

    } else if (msg.text.toString() === "–¢–æ—Ä—Ç—ã üéÇ") {

    } else if (msg.text.toString() === "–û—Ç–º–µ–Ω–∞") {
        bot.sendMessage(
            chatId,
            `${chatOpponent}, –≤—ã –Ω–∞–∂–∞–ª–∏ "–æ—Ç–º–µ–Ω–∞"`,
            {reply_markup: addBackButton(previousMenu, keyboardBalloons)}
        );
    } else if (msg.text.toString().length >= 4 && msg.text.toString().length <= 8) {
        let message = msg.text.toString();
        checkDashInString();

        function checkDashInString() {
            let dash = 0;
            for (let i = 0; i < message.length; i++) {
                if (message[i] === "-") {
                    dash++
                }
            }

            if (dash === 2) {
                let messageArray = message.split("-");
                checkNumberNotZero(messageArray);
            } else {
                console.log('Wrong type of message')
            }
        }

        function checkNumberNotZero(messageArray) {
            console.log(messageArray);
            for (let i = 0; i < messageArray.length; i++) {
                if (i === 0) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong article, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Article cant be zero');
                    }
                } else if (i === 1) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong color, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Color cant be zero');
                    }
                } else if (i === 2) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong count, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Count cant be zero');
                    }
                }
            }
        }

    } else {
        console.log('Wrong type of message')
    }
});


//–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ñ–æ—Ç–æ
bot.on('contact', (msg) => {
    console.log(msg);
    const chatId = msg.chat.id;
    const fromName = msg.from.first_name;
    const fromLastName = msg.from.last_name;
    const fromUsername = msg.from.username;
    const fromContact = msg.contact.phone_number;

    bot.sendMessage(
        chatId,
        `${fromName}, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞—Å—á–µ—Ç—É...`,
        {reply_markup: addBackButton(previousMenu, keyboardBalloons)}
    );


    bot.sendMessage(
        adminChatID,
        "<b>–ë–æ—Å—Å —É –Ω–∞—Å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!</b> \n–ü—Ä–æ—Å–∏—Ç —Å–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ñ–æ—Ç–æ." + `\n\n<b>–§–ò–û:</b> ${fromName} ${fromLastName} \n<b>–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º:</b> ${fromUsername} \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fromContact}`,
        {parse_mode: 'HTML'},
    );
});

//–ø–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å –ª–∏—Å—Ç
// let priceList = [];
//
// dataBaseQuery("SELECT * FROM telegramdb.balloonprice ORDER BY id_balloon", function (result) {
//     // console.log(result);
//     priceList = result.slice();
//     arrayFromPriceListKeys(priceList);
// });


let newAddingBalloon = {
    glue: [],
    texture_color: [],
    // color: [], //return  color: [ null ]
    size_inches: [],
    size_sm: [],
    inner_atribut: [],
    // number_foil: [], //return  number_foil: [ null ]
    printed_text: [],
    made_in: [],
};


//–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ –ø–æ –∫–∞–∂–¥–ª–æ–º—É —à–∞—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
function arrayFromPriceListKeys (priceList) {
    let element = {
        glue: [],
        texture_color: [],
        // color: [], //return  color: [ null ]
        size_inches: [],
        size_sm: [],
        inner_atribut: [],
        // number_foil: [], //return  number_foil: [ null ]
        printed_text: [],
        made_in: [],
    };
    let elementKeysList = Object.keys(element); //–º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π []

    for (let j = 0; j < priceList.length; j++) {
        for (let i = 0; i < elementKeysList.length; i++) {
            element[elementKeysList[i]].push(priceList[j][elementKeysList[i]])
        }
    }

    for (let i = 0; i < elementKeysList.length; i++) {
        let unique  = new Set(element[elementKeysList[i]]);
        element[elementKeysList[i]] = Array.from(unique).sort();
        if (element[elementKeysList[i]].length < 2 && element[elementKeysList[i]][0] === null) {
            delete element[elementKeysList[i]];
        }
    }
    // console.log(element);

    return element;
};

//–ø—Ä–∞–π—Å –ª–∏—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
let cleanOrPaintedFoil = [];
let figureFlyFoil = [];
let numberFoil = [];
let letterFoil = [];
let floorMoveFoil = [];

let classic = [];
let heart = [];
let bigSize = [];
let babbles = [];
let withPaint = [];
// let modelBalloon = [];

const cleanOrPaintedFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('—Å–µ—Ä–¥—Ü–µ','–∑–≤–µ–∑–¥–∞','–∫—Ä—É–≥') ORDER BY id_balloon";
const figureFlyFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('—Ñ–∏–≥—É—Ä—ã') ORDER BY id_balloon";
const numberFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('—Ü–∏—Ñ—Ä–∞') ORDER BY id_balloon";
const letterFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–±—É–∫–≤–∞') ORDER BY id_balloon";
const floorMoveFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–Ω–∞–ø–æ–ª—å–Ω—ã–µ') ORDER BY id_balloon";

const classicFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and size_inches IN ('10','12','14','16','18') ORDER BY id_balloon";
const heartFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('—Å–µ—Ä–¥—Ü–µ') ORDER BY id_balloon";
const bigSizeFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and size_inches IN ('24','26','27','30','36','40') ORDER BY id_balloon";
const babblesFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–±–∞–±–ª—Å') and form_factor IN ('—à–∞—Ä') ORDER BY id_balloon";
const withPaintFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and texture_color IN ('–¥–∏–∑–∞–π–Ω') ORDER BY id_balloon";
// const modelBalloonFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ') ORDER BY id_balloon";


//—Ñ–æ–ª—å–≥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—å–µ–∫—Ç –ø—Ä–∞–π—Å –ª–∏—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
dataBaseQuery(cleanOrPaintedFoilFilter, function (result) {
    cleanOrPaintedFoil = result.slice();
});


dataBaseQuery(figureFlyFoilFilter, function (result) {
    figureFlyFoil = result.slice();
});


dataBaseQuery(numberFoilFilter, function (result) {
    numberFoil = result.slice();
});

dataBaseQuery(letterFoilFilter, function (result) {
    letterFoil = result.slice();
});

dataBaseQuery(floorMoveFoilFilter, function (result) {
    floorMoveFoil = result.slice();
});


//–ª–∞—Ç–µ–∫—Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—å–µ–∫—Ç –ø—Ä–∞–π—Å –ª–∏—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
dataBaseQuery(classicFilter, function (result) {
    classic = result.slice();
});

dataBaseQuery(heartFilter, function (result) {
    heart = result.slice();
});

dataBaseQuery(bigSizeFilter, function (result) {
    bigSize = result.slice();
});

dataBaseQuery(babblesFilter, function (result) {
    babbles = result.slice();
});

dataBaseQuery(withPaintFilter, function (result) {
    withPaint = result.slice();
});

// dataBaseQuery(modelBalloonFilter, function (result) {
//     modelBalloon = result.slice();
// });



bot.on("callback_query", (msg) => {

    // console.log(msg);
    const chatValue = msg.message.chat;
    const chatId = chatValue.id;
    const chatOpponent = chatValue.first_name ? chatValue.first_name : "–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç";
    const messageId = msg.message.message_id;


    // bot.sendMessage(chatId,
    //     `${msg.data} -------- callbackquery –∫–Ω–æ–ø–∫–∞`,
    //     {reply_markup: {}});


    if (msg.data.toString() === "–®–∞—Ä—ã üéà") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571498410/TelegramBotSharoladya/sharolandiay_noxiev.png">–®–∞—Ä–æ–ª–∞–Ω–¥–∏—è</a>' + `\n${chatOpponent}, –≤—ã –Ω–∞–∂–∞–ª–∏ —à–∞—Ä—ã –≤–≤–æ–¥–Ω–∞—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å–ª—É–≥–∞–º`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, keyboardBalloons),
                parse_mode: "HTML"
            });
        previousMenu = "–®–∞—Ä—ã üéà";

    } else if (msg.data.toString() === "–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571502686/TelegramBotSharoladya/catalog_ktpfa6.png">–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ</a>' + `${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, priceListKeyboard),
                parse_mode: "HTML"
            });
        previousMenu = "–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ";

    } else if (msg.data.toString() === "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ñ–æ—Ç–æ üñºÔ∏è") {
        bot.editMessageText(
            `${chatOpponent}` + ', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. \n\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. \n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ 30 –º–∏–Ω—É—Ç.',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, getPriceFromPhotoKeyboard)
            })
            .then(() => {
                bot.on('photo', (msg) => {
                    const photoObjectList = msg.photo;
                    console.log('list', msg.photo)
                    if (photoObjectList) {
                        // let lowQualityPhotoFileId = photoObjectList[0].file_id;
                        // let middleQualityPhotoFileId = photoObjectList[1].file_id;
                        photoList.length >= 2 ? photoList.push(photoObjectList[1].file_id) : photoList.push(photoObjectList[0].file_id);
                    }

                    if (photoList.length === 1) {
                        bot.sendMessage(
                            msg.chat.id,
                            "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?",
                            sendVCard)
                    }
                });
                setTimeout(
                    () => {
                        for (let i = 0; i < photoList.length; i++) {
                            let fileId = photoList[i];
                            bot.sendPhoto(adminChatID, fileId);
                        }
                        photoList = [];
                    },
                    60000
                );
            });
        previousMenu = "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ñ–æ—Ç–æ üñºÔ∏è";

    } else if (msg.data.toString() === "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚ùì") {
        bot.editMessageText(
            '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, faqKeyboard)
            });
        previousMenu = "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚ùì";

    } else if (msg.data.toString() === "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì") {
        bot.editMessageText(
            '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, faqKeyboard)
            });
        previousMenu = "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì";

    } else if (msg.data.toString() === "–î–æ—Å—Ç–∞–≤–∫–∞ üöö") {
        bot.editMessageText(
            '–î–æ—Å—Ç–∞–≤–∫–∞ üöö',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, faqKeyboard)
            });
        previousMenu = "–î–æ—Å—Ç–∞–≤–∫–∞ üöö";

    } else if (msg.data.toString() === "–ê–¥—Ä–µ—Å–∞") {
        bot.editMessageText(
            '–ê–¥—Ä–µ—Å–∞',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, faqKeyboard)
            });
        previousMenu = "–ê–¥—Ä–µ—Å–∞";

    } else if (msg.data.toString() === "–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç") {
        bot.editMessageText(
            '–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, faqKeyboard)
            });
        previousMenu = "–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç";

    } else if (msg.data.toString() === "–ö–æ—Ä–∑–∏–Ω–∞ üì¶") {
        let items = false;
        if (items) {
            bot.editMessageText(
                '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: addBackButton(previousMenu, cartKeyboard)
                });
        } else {
            bot.editMessageText(
                '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: addBackButton(previousMenu, cartKeyboard)
                });
        }
        previousMenu = "–ö–æ—Ä–∑–∏–Ω–∞ üì¶";

    } else if (msg.data.toString() === "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº") {
        bot.editMessageText(
            `–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, profileKeyboard)
            });
        previousMenu = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº";

    } else if (msg.data.toString() === "–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571502015/TelegramBotSharoladya/classic_exqdvy.png">–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicBallonsKeyboard),
                parse_mode: "HTML"
            });
        previousMenu = "–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã";

    } else if (msg.data.toString() === "–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞—Ä–æ–≤`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã";

    } else if (msg.data.toString() === "–§–∏–≥—É—Ä—ã") {
        arrayFromPriceListKeys(figureFlyFoil);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–∏–≥—É—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä—ã`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–§–∏–≥—É—Ä—ã";

    } else if (msg.data.toString() === "–¶–∏—Ñ—Ä—ã") {
        arrayFromPriceListKeys(numberFoil);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–¶–∏—Ñ—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–¶–∏—Ñ—Ä—ã";

    } else if (msg.data.toString() === "–§–æ–ª—å–≥–∞ —Å —Ä–∏—Å—É–Ω–∫–æ–º") {
        arrayFromPriceListKeys(cleanOrPaintedFoil);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–æ–ª—å–≥–∞ —Å —Ä–∏—Å—É–Ω–∫–æ–º</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞—Ä—ã —Å —Ä–∏—Å—É–Ω–∫–æ–º`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–§–æ–ª—å–≥–∞ —Å —Ä–∏—Å—É–Ω–∫–æ–º";

    } else if (msg.data.toString() === "–§–æ–ª—å–≥–∞ –±–µ–∑ —Ä–∏—Å—É–Ω–∫–æ–º") {
        arrayFromPriceListKeys(cleanOrPaintedFoil);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–æ–ª—å–≥–∞ –±–µ–∑ —Ä–∏—Å—É–Ω–∫–æ–º</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞—Ä–æ–≤ –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–§–æ–ª—å–≥–∞ –±–µ–∑ —Ä–∏—Å—É–Ω–∫–æ–º";

    } else if (msg.data.toString() === "–ë—É–∫–≤—ã") {
        arrayFromPriceListKeys(letterFoil);


        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–ë—É–∫–≤—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–ë—É–∫–≤—ã";

    } else if (msg.data.toString() === "–•–æ–¥–∏–ª–∫–∏") {
        arrayFromPriceListKeys(floorMoveFoil);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–∏–≥—É—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–æ–¥–∏–ª–æ–∫`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, foilBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–•–æ–¥–∏–ª–∫–∏";

    } else if (msg.data.toString() === "–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã") {


        interview(classic);
        // bot.editMessageText(
        //     '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –ª–∞—Ç–µ–∫—Å–Ω—ã—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤.`,
        //     {
        //         chat_id: chatId,
        //         message_id: messageId,
        //         reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
        //         parse_mode: "HTML"
        //     });

        previousMenu = "–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã";

    } else if (msg.data.toString() === "–®–∞—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è") {
        // arrayFromPriceListKeys(modelBalloon);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–®–∞—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —à–∞—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–®–∞—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è";

    } else if (msg.data.toString() === "–°–µ—Ä–¥—Ü–∞") {
        arrayFromPriceListKeys(heart);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–°–µ—Ä–¥—Ü–∞</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —à–∞—Ä–æ–≤ —Å–µ—Ä–¥—Ü–∞.`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–°–µ—Ä–¥—Ü–∞";

    } else if (msg.data.toString() === "–ë–æ–ª—å—à–∏–µ —à–∞—Ä—ã") {
        arrayFromPriceListKeys(bigSize);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–ë–æ–ª—å—à–∏–µ —à–∞—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –±–æ–ª—å—à–∏—Ö —à–∞—Ä–æ–≤.`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–ë–æ–ª—å—à–∏–µ —à–∞—Ä—ã";

    } else if (msg.data.toString() === "–ë–∞–±–ª—Å") {
        arrayFromPriceListKeys(babbles);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–ë–∞–±–ª—Å</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –±–∞–±–ª—Å.`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–ë–∞–±–ª—Å";

    } else if (msg.data.toString() === "–®–∞—Ä—ã —Å —Ä–∏—Å—É–Ω–∫–æ–º") {
        arrayFromPriceListKeys(withPaint);

        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–®–∞—Ä—ã —Å —Ä–∏—Å—É–Ω–∫–æ–º</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —à–∞—Ä–æ–≤ —Å —Ä–∏—Å—É–Ω–∫–æ–º.`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
                parse_mode: "HTML"
            });

        previousMenu = "–®–∞—Ä—ã —Å —Ä–∏—Å—É–Ω–∫–æ–º";

    } else if (msg.data.toString() === "–æ–ø—Ä–æ—Å") {
        //–∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        interview()
    }

    //–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ —à–∞—Ä–∞–º
    // —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function interview(data) {
        console.log('interview');
        let arrayValuesForEachKey = arrayFromPriceListKeys(data);
        // const keysArray = Object.keys(arrayFromPriceListKeys).sort();

        if (arrayValuesForEachKey.hasOwnProperty('glue')) {
            if (arrayValuesForEachKey.glue.length > 0 && newAddingBalloon.glue.length < 1) {
                let standartKeyboard = addBackButton(previousMenu, classicCircleBallonsKeyboard);
                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.glue, "glue");

                bot.editMessageText(
                    '<a href="">–û–±—Ä–∞–±–æ—Ç–∫–∞ </a>' + `–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞—Ä–∞: –í–∞–º —à–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ?`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, standartKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            }
            // Do things here
        }
        else if (arrayValuesForEachKey.hasOwnProperty('texture_color')) {
            if (arrayValuesForEachKey.texture_color.length > 0 && newAddingBalloon.texture_color.length < 1) {
                let standartKeyboard = addBackButton(previousMenu, classicCircleBallonsKeyboard);
                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.glue, "texture_color");

                bot.editMessageText(
                    '<a href="">–û–±—Ä–∞–±–æ—Ç–∫–∞</a>' + `–£ –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤ –±—ã–≤–∞–µ—Ç —Ä–∞—â–ª–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ü–≤–µ—Ç–∞. –®–∞—Ä—ã —Å —Å–ª–æ–∂–Ω—ã–º —Ü–≤–µ—Ç–æ–º —á—É—Ç—å –¥–æ—Ä–æ—à–µ –ø—Ä–æ—Å—Ç—ã—Ö. –ö–∞–∫–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–∞–º –Ω—É–∂–Ω–∞?`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, standartKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            }
            // Do things here
        }
    }
});




bot.on("polling_error", (err) => console.log(err));

//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–±
function dataBaseQuery(selector, dataBQ) {
    pool.query(selector, (err, res) => {
        dataBQ(res.rows);
        if (err) {
            console.log(err);
        } else {
            console.log("connected to database");
        }
    });

}









// else if (msg.data.toString() === "–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã") {//–ø–æ–¥ –∑–∞–º–µ–Ω—É –∫–æ–ª–±–µ–∫
//     console.log(priceList);
//     const classicLatexNormalFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and size_inches IN ('10','12','14','16','18') ORDER BY id_balloon";
//
//     dataBaseQuery(classicLatexNormalFilter, function (result) {
//         let table = makeString(result);
//         bot.editMessageText(
//             '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1572645575/TelegramBotSharoladya/Frame_1_mey6ns.png">–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –ª–∞—Ç–µ–∫—Å–Ω—ã—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤.\n\n${table}`,
//             {
//                 chat_id: chatId,
//                 message_id: messageId,
//                 reply_markup: addBackButton(previousMenu, classicCircleBallonsKeyboard),
//                 parse_mode: "HTML"
//             });
//         previousMenu = "–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã";
//     });
// }



//—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function makeString(data) {

    // {
    //     id_balloon: 15,
    //     material: '–∫–∞—É—á—É–∫',
    //     form_factor: '–∫–ª–∞—Å–∏—á–µ—Å–∫–∏–µ',
    //     glue: true,
    //     texture_color: '4 –≤–∏–¥–∞ ',
    //     color: '72 –≤–∏–¥–∞',
    //     size_inches: 12,
    //     size_sm: 30,
    //     inner_atribut: null,
    //     number_foil: null,
    //     printed_text: 'false',
    //     made_in: null,
    //     price: 110
    // }
    let instruction = "<strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:\n</strong>" +
        "1) –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–∫—É–ª—å —à–∞—Ä–∞, –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º\n" +
        "2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ü–∏—Ñ—Ä–∞–º–∏, —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞):\n " +
        "–∞—Ä—Ç–∏–∫—É–ª—å-—Ü–≤–µ—Ç-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n" +
        "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n—Ö—Ö-—Ö—Ö-—Ö—Ö\n";

    let terms = "<strong>–°–æ–∫—Ä–∞—â–µ–Ω–∏—è:</strong>\n" +
        "<strong>\"–ê—Ä\"</strong> - –∞—Ä—Ç–∏–∫—É–ª—å —Ç–æ–≤–∞—Ä–∞.\n " +
        "<strong>\"–û–±\"</strong> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞—Ä–∞.\n" +
        "<strong>\"–¢–µ–∫\"</strong> - —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ü–≤–µ—Ç–∞ (–ø–∞—Å—Ç–µ–ª—å, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, –º–µ—Ç–∞–ª–∏–∫, —Å –¥–∏–∑–∞–π–Ω–æ–º, —Ö—Ä–æ–º, –∞–≥–∞—Ç).\n" +
        "<strong>\"–î.\"</strong> - –¥—é–π–º–æ–≤ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ.\n" +
        "<strong>\"–°–º\"</strong> - —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ –≤ –¥–∏–∞–º–µ—Ç—Ä–µ.\n" +
        "<strong>\"–ù–∞–ø\"</strong> - –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏–ª–∏ –∫—Ä–∞—Å–∫–∏.\n" +
        "<strong>\"–¶–µ–Ω\"</strong> - —Å—Ç–æ–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö.\n\n ";

    let catalog = "<strong>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</strong>\n" +
        "\n| –ê—Ä | –û–± | –¢–µ–∫ | –î. | –°–º | –ù–∞–ø | –¶–µ–Ω |\n";

    for (let i = 0; i < data.length; i++) {
        let idBalloon = data[i].id_balloon >= 10 ? data[i].id_balloon : `${data[i].id_balloon}  `;
        let material = data[i].material;
        let formFactor = data[i].form_factor;
        let glue = data[i].glue ? '–¥–∞ ' : '–Ω–µ—Ç';
        let textureColor = data[i].texture_color.length > 3 ? data[i].texture_color.slice(0, 3) : data[i].texture_color;
        let color = data[i].color;
        let sizeInches = data[i].size_inches;
        let sizeSm = data[i].size_sm;
        let innerAtribut = data[i].inner_atribut ? "–¥–∞  " : "–Ω–µ—Ç";
        let numberFoil = data[i].number_foil;
        let printedText = data[i].printed_text;
        let madeIn = data[i].made_in;
        let price = data[i].price >= 100 ? data[i].price : ` ${data[i].price} `;

        catalog += `|  ${idBalloon} | ${glue} | ${textureColor}  | ${sizeInches} | ${sizeSm} |  ${innerAtribut} | ${price} |\n`;
    }
    let textMessage = catalog + "\n" + terms + instruction;
    return textMessage;
}
