const TelegramBot = require('node-telegram-bot-api');
const TOKEN = "869793649:AAGBDwsYi_yCpSQ5V7_qvaTUx08pVkOn2GQ";
const bot = new TelegramBot(TOKEN, {polling: true});
const keyboard = require('./keyboard/inlineKeyboard');
const pool = require('./connectDB').pgPool;
const cTable = require('console.table');

const keyboardDefault = keyboard.keyboardDefault();
const sendVCard = keyboard.sendVCard();
const keyboardBalloons = keyboard.keyboardBalloons();
const priceListKeyboard = keyboard.priceListKeyboard();
const classicBallonsKeyboard = keyboard.classicBallonsKeyboard();
const classicCircleBallonsKeyboard = keyboard.classicCircleBallonsKeyboard();
const foilBallonsKeyboard = keyboard.foilBallonsKeyboard();
const getPriceFromPhotoKeyboard = keyboard.getPriceFromPhotoKeyboard();
const faqKeyboard = keyboard.faqKeyboard();
const cartKeyboard = keyboard.cartKeyboard();
const profileKeyboard = keyboard.profileKeyboard();
const addItemInCart = keyboard.addItemInCart();

let photoList = [];
const adminChatID = '1875888';
let previousMenuList = [];
let previousMenu = '';
let arrayValuesForEachKey = [];
let currentCategory = '';

//–ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ —à–∞—Ä–∞ –æ–ø—Ä–∞—à–∏–≤–∞—è –∫–ª–∏–µ–Ω—Ç–∞
let newAddingBalloon = {
    glue: '',
    texture_color: '',
    // color: [], //return  color: [ null ]
    size_inches: '',
    // size_sm: '',
    inner_atribut: '',
    // number_foil: [], //return  number_foil: [ null ]
    printed_text: '',
    made_in: '',
};

let itemListInCart = []; //–∫–æ—Ä–∑–∏–Ω–∞ - –º–∞—Å—Å–∏–≤ –æ–±—å–µ–∫—Ç–æ–≤ —à–∞—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
let filteredByConstructor = []; //–Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –æ–±—å–µ–∫—Ç—ã —à–∞—Ä–æ–≤
let filteredSelector = '';

//–æ—á–∏—Å—Ç–∫–∏ –æ–±—å–µ–∫—Ç–∞ —à–∞—Ä–∞, –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function cleanNewAddingBalloon () {
    console.log('function cleanNewAddingBalloon');
    for (let i in newAddingBalloon){
        if (newAddingBalloon.hasOwnProperty(i)){
            delete newAddingBalloon[i];
        }
    }
}

//—Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É - –Ω–æ–≤–æ–º—É –æ–±—å–µ–∫—Ç—É —à–∞—Ä–∞ newAddingBalloon
function selectorBuilder(selector) {
    if (newAddingBalloon.size_inches) {
        let tempFilter = selector.slice(0, -20); //–æ–±—Ä–µ–∑–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫ –±–∞–∑–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        for (let i in newAddingBalloon) {
            if (newAddingBalloon.hasOwnProperty(i) && newAddingBalloon[i] !== 'null') {
                tempFilter += ` and ${i} IN ('${newAddingBalloon[i]}')`
            } else if (newAddingBalloon.hasOwnProperty(i) && newAddingBalloon[i] === 'null') {
                tempFilter += ` and ${i}`+' IS NULL'
            }
        }
        return tempFilter + " ORDER BY id_balloon";
    } else {
        return selector;
    }
}

//—Ñ–æ–ª—å–≥–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const cleanFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('—Å–µ—Ä–¥—Ü–µ','–∑–≤–µ–∑–¥–∞','–∫—Ä—É–≥') ORDER BY id_balloon";
const paintedFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('—Å–µ—Ä–¥—Ü–µ —Å —Ä–∏—Å—É–Ω–∫–æ–º', '–∑–≤–µ–∑–¥–∞ —Å —Ä–∏—Å—É–Ω–∫–æ–º', '–∫—Ä—É–≥ —Å —Ä–∏—Å—É–Ω–∫–æ–º') ORDER BY id_balloon";
const figureFlyFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('—Ñ–∏–≥—É—Ä–∞ –ª–µ—Ç–∞—é—â–∞—è') ORDER BY id_balloon";
const numberFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('—Ü–∏—Ñ—Ä–∞') ORDER BY id_balloon";
const letterFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('–±—É–∫–≤–∞') ORDER BY id_balloon";
const floorMoveFoilFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material IN ('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ') and form_factor IN ('—Ñ–∏–≥—É—Ä–∞ –Ω–∞–ø–æ–ª—å–Ω–∞—è') ORDER BY id_balloon";

//–ª–∞—Ç–µ–∫—Å —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const classicFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and size_inches IN ('10','12','14','16','18') ORDER BY id_balloon";
const heartFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('—Å–µ—Ä–¥—Ü–µ') ORDER BY id_balloon";
const bigSizeFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π') and size_inches IN ('24','26','27','30','36','40') ORDER BY id_balloon";
const babblesFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–±–∞–±–ª—Å') and form_factor IN ('—à–∞—Ä') ORDER BY id_balloon";
const withPaintFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π c —Ä–∏—Å—É–Ω–∫–æ–º') ORDER BY id_balloon";
const modelBalloonFilter = "SELECT * FROM telegramdb.balloonprice WHERE  material  IN ('–ª–∞—Ç–µ–∫—Å') and form_factor IN ('—à–∞—Ä –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è') ORDER BY id_balloon";


//—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª—é—á–µ–π –æ–±—å–µ–∫—Ç–∞ objectKey –ø—Ä–∞–π—Å–ª–∏—Å—Ç–∞ –∏ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π customKeyboard
function addPriceListKeyButtons (objectValue, objectKey) {
    console.log('function addPriceListKeyButtons');

    let arrayButtons = [];
    let temp = [];

    for(let k = 0; k < objectValue.length; k++) {
        let data = '';
        if (objectValue[k] && typeof objectValue[k] === 'boolean' || objectValue[k] === 'true') {
            data = '–î–∞';
        } else if (!objectValue[k] && typeof objectValue[k] === 'boolean' || objectValue[k] === 'false') {
            data = '–ù–µ—Ç';
        } else if (!objectValue[k] && typeof objectValue[k] === 'object') {
            data = '–ù–µ—Ç';
        } else {
            data = objectValue[k]
        }

        temp.push({text: data,callback_data: '–æ–ø—Ä–æ—Å.'+objectKey+'.'+objectValue[k]});
        if((k+1) % 4 === 0) {
            arrayButtons.push(temp);
            temp = []
        } else if(k+1 === objectValue.length ) {
            arrayButtons.push(temp)
        }
    }
    return arrayButtons;
}

//—Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
function concatButtons (fistkeyboard, secondkeyboard) {
    return {inline_keyboard: fistkeyboard.concat(secondkeyboard)};
}

//–¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Ñ–æ—Ç–æ
bot.on('contact', (msg) => {
    console.log(msg);
    const chatId = msg.chat.id;
    const fromName = msg.from.first_name;
    const fromLastName = msg.from.last_name;
    const fromUsername = msg.from.username;
    const fromContact = msg.contact.phone_number;

    bot.sendMessage(
        chatId,
        `${fromName}, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞—Å—á–µ—Ç—É...`,
        {reply_markup: keyboardBalloons}
    );


    bot.sendMessage(
        adminChatID,
        "<b>–ë–æ—Å—Å —É –Ω–∞—Å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!</b> \n–ü—Ä–æ—Å–∏—Ç —Å–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ñ–æ—Ç–æ." + `\n\n<b>–§–ò–û:</b> ${fromName} ${fromLastName} \n<b>–ù–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º:</b> ${fromUsername} \n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fromContact}`,
        {parse_mode: 'HTML'},
    );
});


//–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
function arrayFromPriceListKeys (priceList) {
    console.log('function arrayFromPriceListKeys ');
    let element = {
        glue: [],
        texture_color: [],
        // color: [], //return  color: [ null ]
        size_inches: [],
        // size_sm: [],
        inner_atribut: [],
        // number_foil: [], //return  number_foil: [ null ]
        printed_text: [],
        made_in: [],
    };
    let elementKeysList = Object.keys(element); //–º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π []

    for (let j = 0; j < priceList.length; j++) {
        for (let i = 0; i < elementKeysList.length; i++) {
            element[elementKeysList[i]].push(priceList[j][elementKeysList[i]])
        }
    }

    for (let i = 0; i < elementKeysList.length; i++) {
        let unique  = new Set(element[elementKeysList[i]]);
        element[elementKeysList[i]] = Array.from(unique).sort();
        if (element[elementKeysList[i]].length < 2 && element[elementKeysList[i]][0] === null) {
            delete element[elementKeysList[i]];
        }
    }

    return element;
};


//—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –º–µ–Ω—é –≤ –ª–∏—Å—Ç
function checkAndPush(data) {
    // console.log("--------------");
    if (previousMenuList[previousMenuList.length-1] !== data && previousMenu !== data) {
        previousMenuList.push(data)
    }
    // console.log("[list]", previousMenuList);
    // console.log("[last]", previousMenu);
    // console.log("--------------");
}


bot.on('text', (msg) => {
    const chatValue = msg.chat;
    const chatId = msg.chat.id;
    const chatOpponent = chatValue.first_name ? chatValue.first_name : "–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç";

    if (msg.text.toString() === "/start") {
        bot.sendMessage(
            chatId,
            `${chatOpponent}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫—Å–∫–∏–π –ø–æ–º–æ—à–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. –ü—Ä–æ—à—É —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
            {reply_markup: keyboardDefault}
        )
    }

    if (msg.text.toString() === "–®–∞—Ä—ã üéà") {
        // bot.sendPhoto(chatId, "https://avatars.mds.yandex.net/get-pdb/1681173/b1c1cbe3-c6ef-4662-af9e-fe3db83d1ec8/s1200");
        bot.sendMessage(
            chatId,
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579467751/TelegramBotSharoladya/%D0%93%D1%80%D1%83%D0%BF%D0%BF%D0%B0_1%D0%B0-light_fwbv3n.png">–®–∞—Ä–æ–ª–∞–Ω–¥–∏—è</a>' + `\n${chatOpponent}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º –∫–∞—Ç–∞–ª–æ–≥ –∏ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!`,
            {
                reply_markup: keyboardBalloons,
                parse_mode: "HTML"
            }
        );
        checkAndPush("–®–∞—Ä—ã üéà");

    } else if (msg.text.toString() === "–¢–æ—Ä—Ç—ã üéÇ") {

    } else if (msg.text.toString() === "–û—Ç–º–µ–Ω–∞") {
        bot.sendMessage(
            chatId,
            `${chatOpponent}, –≤—ã –Ω–∞–∂–∞–ª–∏ "–æ—Ç–º–µ–Ω–∞"`,
            {reply_markup: keyboardDefault}
        );
    } else if (msg.text.toString().length >= 4 && msg.text.toString().length <= 8) {
        let message = msg.text.toString();
        checkDashInString();

        function checkDashInString() {
            let dash = 0;
            for (let i = 0; i < message.length; i++) {
                if (message[i] === "-") {
                    dash++
                }
            }

            if (dash === 2) {
                let messageArray = message.split("-");
                checkNumberNotZero(messageArray);
            } else {
                console.log('Wrong type of message')
            }
        }

        function checkNumberNotZero(messageArray) {
            for (let i = 0; i < messageArray.length; i++) {
                if (i === 0) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong article, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Article cant be zero');
                    }
                } else if (i === 1) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong color, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Color cant be zero');
                    }
                } else if (i === 2) {
                    if (!parseInt(messageArray[i]) || isNaN(messageArray[i])) {
                        console.log('Wrong count, cant be empty or with letters');
                    } else if (parseInt(messageArray[i]) === 0) {
                        console.log(isNaN(messageArray[i]), 'Count cant be zero');
                    }
                }
            }
        }

    } else {
        console.log('Wrong type of message')
    }
});


bot.on("callback_query", (msg) => {

    // console.log(msg);
    const chatValue = msg.message.chat;
    const chatId = chatValue.id;
    const chatOpponent = chatValue.first_name ? chatValue.first_name : "–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç";
    const messageId = msg.message.message_id;
    let answer = msg.data.toString();


    // bot.sendMessage(chatId,
    //     `${msg.data} -------- callbackquery –∫–Ω–æ–ø–∫–∞`,
    //     {reply_markup: {}});

    //–µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–ª–±–µ–∫ –Ω–∞–∑–∞–¥ –∑–∞–ø—É—Å–∫–∞—é –º–µ—Ç–æ–¥ –ø–æ–ø –∏ –º–µ–Ω—è—é –∫–æ–ª–±–µ–∫

    if (answer === '‚¨Ö –ù–∞–∑–∞–¥') {
        if (previousMenuList.length >= 2) {
            previousMenuList.pop();

            if (previousMenuList[previousMenuList.length-1] === '–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å') {
                previousMenuList.pop();
            } else if (previousMenuList[previousMenuList.length-1] === '–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å') {
                previousMenuList.pop();
            }

            answer = previousMenuList[previousMenuList.length-1];
            previousMenu = answer;
        } else {
            answer = '–®–∞—Ä—ã üéà';
        }
    }

    //–æ–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç –æ—Ç –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —à–∞—Ä–∞
    //–∑–∞–ø–æ–Ω—è–µ–º –æ–±—å–µ–∫—Ç –Ω–æ–≤–æ–≥–æ —à–∞—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let interviewAnswer = msg.data.toString().split('.');
    if (interviewAnswer[1] && interviewAnswer[2]) {
        newAddingBalloon[interviewAnswer[1]] = interviewAnswer[2];
        // console.log(newAddingBalloon[interviewAnswer[1]],'----- in to object')
    }


    if (answer === "–®–∞—Ä—ã üéà") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571498410/TelegramBotSharoladya/sharolandiay_noxiev.png">–®–∞—Ä–æ–ª–∞–Ω–¥–∏—è</a>' + `\n${chatOpponent}, –≤—ã –Ω–∞–∂–∞–ª–∏ —à–∞—Ä—ã –≤–≤–æ–¥–Ω–∞—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å–ª—É–≥–∞–º`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboardBalloons,
                parse_mode: "HTML"
            });
        checkAndPush("–®–∞—Ä—ã üéà");

    } else if (answer === "–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571502686/TelegramBotSharoladya/catalog_ktpfa6.png">–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ</a> \n' + `${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã`+' \n\n–ê–∫—Ü–∏—è! üì£\n–û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ ü§ñ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã —Å–ø–∞—Å–∏–±–æ. \n–ó–∞ –∫–∞–∂–¥—ã–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ 10‚ÇΩ –Ω–∞—á–∏—Å–ª–∏–º 1 –±–∞–ª–ª.\n1 –±–∞–ª–ª = 1 —Ä—É–±–ª—é üí∏\n\nüî∫–í –∞–∫—Ü–∏–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç —É—Å–ª—É–≥–∞ ¬´—Ü–µ–Ω–∞ –ø–æ —Ñ–æ—Ç–æ¬ª.',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: priceListKeyboard,
                parse_mode: "HTML"
            });
        checkAndPush("–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ü–µ–Ω—ã üéÅ");

    } else if (answer === "–¶–µ–Ω–∞ –ø–æ —Ñ–æ—Ç–æ üì∏") {
        bot.editMessageText(
            `${chatOpponent}` + ', –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. \n\nüì≤ –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. \n\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ 30 –º–∏–Ω—É—Ç.',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: getPriceFromPhotoKeyboard
            })
            .then(() => {
                bot.on('photo', (msg) => {
                    const photoObjectList = msg.photo;
                    console.log('list', msg.photo);
                    if (photoObjectList) {
                        // let lowQualityPhotoFileId = photoObjectList[0].file_id;
                        // let middleQualityPhotoFileId = photoObjectList[1].file_id;
                        photoList.length >= 2 ? photoList.push(photoObjectList[1].file_id) : photoList.push(photoObjectList[0].file_id);
                    }

                    if (photoList.length === 1) {
                        bot.sendMessage(
                            msg.chat.id,
                            "–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?",
                            sendVCard)
                    }
                });
                setTimeout(
                    () => {
                        for (let i = 0; i < photoList.length; i++) {
                            let fileId = photoList[i];
                            bot.sendPhoto(adminChatID, fileId);
                        }
                        photoList = [];
                    },
                    60000
                );
            });
        checkAndPush("–¶–µ–Ω–∞ –ø–æ —Ñ–æ—Ç–æ üì∏");

    } else if (answer === "–í–æ–ø—Ä–æ—Å—ã ‚ùì") {
        bot.editMessageText(
            '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: faqKeyboard
            });
        checkAndPush("–í–æ–ø—Ä–æ—Å—ã ‚ùì");

    } else if (answer === "–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì") {
        bot.editMessageText(
            '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: faqKeyboard
            });
        checkAndPush("–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å ‚ùì");

    } else if (answer === "–î–æ—Å—Ç–∞–≤–∫–∞ üöö") {
        bot.editMessageText(
            '–î–æ—Å—Ç–∞–≤–∫–∞ üöö',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: faqKeyboard
            });
        checkAndPush("–î–æ—Å—Ç–∞–≤–∫–∞ üöö");

    } else if (answer === "–ê–¥—Ä–µ—Å–∞") {
        bot.editMessageText(
            '–ê–¥—Ä–µ—Å–∞',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: faqKeyboard
            });
        checkAndPush("–ê–¥—Ä–µ—Å–∞");

    } else if (answer === "–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç") {
        bot.editMessageText(
            '–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç',
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: faqKeyboard
            });
        checkAndPush("–ì–∞—Ä–∞–Ω—Ç–∏–∏ üëç");

    } else if (answer === "–ö–æ—Ä–∑–∏–Ω–∞ üì¶") {
        let tempStr = ''
        let items = itemListInCart.forEach(i => {tempStr + makeString(i) +'/n'});
        console.log(items);
        if (itemListInCart.length >= 1) {
            bot.editMessageText(
                '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: cartKeyboard
                });
        } else {
            bot.editMessageText(
                '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: cartKeyboard
                });
        }
        checkAndPush("–ö–æ—Ä–∑–∏–Ω–∞ üì¶");

    } else if (answer === "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç üíº") {
        bot.editMessageText(
            `–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: profileKeyboard
            });
        checkAndPush("–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç üíº");

    } else if (answer === "–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571502015/TelegramBotSharoladya/classic_exqdvy.png">–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: classicBallonsKeyboard,
                parse_mode: "HTML"
            });
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã");

    } else if (answer === "–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã") {
        bot.editMessageText(
            '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1571501721/TelegramBotSharoladya/foil_rhy8vw.png">–§–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã</a>' + `\n${chatOpponent}, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞—Ä–æ–≤`,
            {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: foilBallonsKeyboard,
                parse_mode: "HTML"
            });

        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã");

    } else if (answer === "–§–∏–≥—É—Ä—ã") {
        cleanNewAddingBalloon();
        currentCategory = figureFlyFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–¶–∏—Ñ—Ä—ã") {
        cleanNewAddingBalloon();
        currentCategory = numberFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");


    } else if (answer === "–§–æ–ª—å–≥–∞ —Å —Ä–∏—Å—É–Ω–∫–æ–º") {
        cleanNewAddingBalloon();
        currentCategory = paintedFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–§–æ–ª—å–≥–∞ –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞") {
        cleanNewAddingBalloon();
        currentCategory = cleanFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–ë—É–∫–≤—ã") {
        cleanNewAddingBalloon();
        currentCategory = letterFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–•–æ–¥–∏–ª–∫–∏") {
        cleanNewAddingBalloon();
        currentCategory = floorMoveFoilFilter;
        interview();
        checkAndPush("–§–æ–ª—å–≥–∏-–Ω–Ω—ã–µ —à–∞—Ä—ã, —Ñ–∏–≥—É—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–ö—Ä—É–≥–ª—ã–µ —à–∞—Ä—ã") {
        cleanNewAddingBalloon();
        currentCategory = classicFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–®–∞—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è") {
        cleanNewAddingBalloon();
        currentCategory = modelBalloonFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–°–µ—Ä–¥—Ü–∞") {
        cleanNewAddingBalloon();
        currentCategory = heartFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–ë–æ–ª—å—à–∏–µ —à–∞—Ä—ã") {
        cleanNewAddingBalloon();
        currentCategory = bigSizeFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–°—Ñ–µ—Ä—ã –ë–∞–±–ª—Å") {
        cleanNewAddingBalloon();
        currentCategory = babblesFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (answer === "–®–∞—Ä—ã —Å —Ä–∏—Å—É–Ω–∫–æ–º") {
        cleanNewAddingBalloon();
        currentCategory = withPaintFilter;
        interview();
        checkAndPush("–í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –æ–ø—Ä–æ—Å");

    } else if (interviewAnswer[0] === "–æ–ø—Ä–æ—Å") {
        interview();

    } else if (interviewAnswer[0] === "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É ‚ûï") {
        itemListInCart.push(newAddingBalloon);
    }




    //–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ —à–∞—Ä–∞–º
    // —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function interview() {
        console.log('function interview');

        filteredSelector = selectorBuilder(currentCategory);//–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ —à–∞—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        // console.log(filteredSelector);
        dataBaseQuery(filteredSelector, function (result) {
            filteredByConstructor = result.slice();
            // console.log(filteredByConstructor);
            arrayValuesForEachKey = arrayFromPriceListKeys(filteredByConstructor);

            if (arrayValuesForEachKey.size_inches &&
                arrayValuesForEachKey.size_inches.length > 1 &&
                !newAddingBalloon.size_inches) {
                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.size_inches, "size_inches");
                let fotoLink = '';
                if (currentCategory.includes('—Ñ–æ–ª—å–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')) {
                    fotoLink = '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579445428/TelegramBotSharoladya/foil-size_rmwkjw.jpg">–†–∞–∑–º–µ—Ä—ã —à–∞—Ä–æ–≤</a>';
                } else if (currentCategory.includes('—à–∞—Ä –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è')) {
                    fotoLink ='<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579445429/TelegramBotSharoladya/SHDM-size_vckam7.jpg">–†–∞–∑–º–µ—Ä—ã —à–∞—Ä–æ–≤</a>';
                } else {
                    fotoLink ='<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579445429/TelegramBotSharoladya/razmery_sharov-1_d55lpj.jpg">–†–∞–∑–º–µ—Ä—ã —à–∞—Ä–æ–≤</a>';
                }

                bot.editMessageText(
                    `${fotoLink}`+' \n\n–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞–º –Ω—É–∂–µ–Ω —à–∞—Ä?',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else if (arrayValuesForEachKey.texture_color &&
                arrayValuesForEachKey.texture_color.length > 1 &&
                !newAddingBalloon.texture_color) {

                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.texture_color, "texture_color");

                bot.editMessageText(
                    '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579467186/TelegramBotSharoladya/texture_mafizy.png">–û–∫—Ä–∞—Å —à–∞—Ä–æ–≤</a> \n\n–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç—É—Ä –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤:\n–∞–≥–∞—Ç, \n–º–µ—Ç–∞–ª–∏–∫, \n—Ö—Ä–æ–º, \n–ø–∞—Å—Ç–µ–ª—å, \n–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π \n\n–ö–∞–∫–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–∞–º –Ω—É–∂–Ω–∞?',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else if (arrayValuesForEachKey.glue &&
                arrayValuesForEachKey.glue.length > 1 &&
                !newAddingBalloon.glue) {

                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.glue, "glue");

                bot.editMessageText(
                    '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579445430/TelegramBotSharoladya/glue_myv5zw.jpg">–í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞</a> \n\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± –ª–µ—Ç–∞–ª –≤–∞—à —à–∞—Ä–∏–∫? \n–¥–æ 10-12 —á–∞—Å–æ–≤  üëâ  –ù–µ—Ç \n–¥–æ 3-7 –¥–Ω–µ–π  üëâ  –î–∞\n',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else if (arrayValuesForEachKey.inner_atribut &&
                arrayValuesForEachKey.inner_atribut.length > 1 &&
                !newAddingBalloon.inner_atribut) {

                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.inner_atribut, "inner_atribut");

                bot.editMessageText(
                    '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579466933/TelegramBotSharoladya/inner-atribut_ezhs29.png">–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å</a> \n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à —à–∞—Ä–∏–∫: \nüéä–∫–æ–Ω—Ñ–µ—Ç—Ç–∏, \nüïä–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä—å—è–º–∏, \n‚ú®—Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞–º–∏. \n\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å?',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else if (arrayValuesForEachKey.printed_text &&
                arrayValuesForEachKey.printed_text.length > 1 &&
                !newAddingBalloon.printed_text) {

                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.printed_text, "printed_text");


                bot.editMessageText(
                    '<a href="https://res.cloudinary.com/sharolandiya/image/upload/v1579452458/TelegramBotSharoladya/balloon-with-text_1_xrjkzj.png">–¢–µ–∫—Å—Ç –Ω–∞ —à–∞—Ä–µ</a>' + `\n\n–ù—É–∂–µ–Ω –ª–∏ –≤–∞–º —Å–≤–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º —à–∞—Ä–µ?‚úèÔ∏è`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else if (arrayValuesForEachKey.made_in &&
                arrayValuesForEachKey.made_in.length > 1 &&
                !newAddingBalloon.made_in) {

                let dynamicKeyboard = addPriceListKeyButtons(arrayValuesForEachKey.made_in, "made_in");

                bot.editMessageText(
                    '<a href="">–û–±—Ä–∞–±–æ—Ç–∫–∞</a> \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è? –ö–∏—Ç–∞–π - –Ω–µ–º–Ω–æ–≥–æ –¥–µ—à–µ–≤–ª–µ –°–®–ê –Ω–æ —É—Å—Ç—É–ø–∞–µ—Ç –ø–æ–∫–∞—á–µ—Å—Ç–≤—É.',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: concatButtons(dynamicKeyboard, classicCircleBallonsKeyboard.inline_keyboard),
                        parse_mode: "HTML"
                    });
            } else {
                // console.log('filtered positions = ',filteredByConstructor.length);

                bot.editMessageText(
                    '<a href=""></a>' + ` ${makeString(filteredByConstructor)}`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: addItemInCart,
                        parse_mode: "HTML"
                    });

            }
        });
    }
});




bot.on("polling_error", (err) => console.log(err));

//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–±
function dataBaseQuery(selector, dataBQ) {
    pool.query(selector, (err, res) => {

        try {
            dataBQ(res.rows);
            console.log("connected to database");
        } catch (e) {
            console.log(e);
        }

        if (err) {
            console.log(err);
        }
    });

}


//—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function makeString(data) {
    console.log('function makeString');
    if (data[0]) {
        // {
        //     id_balloon: 15,
        //     material: '–∫–∞—É—á—É–∫',
        //     form_factor: '–∫–ª–∞—Å–∏—á–µ—Å–∫–∏–µ',
        //     glue: true,
        //     texture_color: '4 –≤–∏–¥–∞ ',
        //     color: '72 –≤–∏–¥–∞',
        //     size_inches: 12,
        //     size_sm: 30,
        //     inner_atribut: null,
        //     number_foil: null,
        //     printed_text: 'false',
        //     made_in: null,
        //     price: 110
        // }
        let instruction = "<strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:\n</strong>" +
            "1) –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–∫—É–ª—å —à–∞—Ä–∞, –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º\n" +
            "2) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ü–∏—Ñ—Ä–∞–º–∏, —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞):\n " +
            "–∞—Ä—Ç–∏–∫—É–ª—å-—Ü–≤–µ—Ç-–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n" +
            "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n—Ö—Ö-—Ö—Ö-—Ö—Ö\n";

        let selected = "\n<strong>üõé–ü–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π —à–∞—Ä:</strong> \n";
        let productInfo = "\n<strong>üìã –û–ø–∏—Å–∞–Ω–∏–µ</strong> \n";

        let idBalloon = data[0].id_balloon ? `\n<strong>üìù –ê—Ä—Ç–∏–∫—É–ª—å:</strong> ‚Ññ${data[0].id_balloon}\n` : ``;

        let material = data[0].material ? `–ú–∞—Ç–µ—Ä–∏–∞–ª: ${data[0].material}, ` : ``;
        let formFactor = data[0].form_factor ? `–§–æ—Ä–º–∞: ${data[0].form_factor}, ` : ``;
        let glue = data[0].glue === 'true' ? `–û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–∞, ` : `–û–±—Ä–∞–±–æ—Ç–∫–∞: –Ω–µ—Ç, `;
        let textureColor = data[0].texture_color ?`–¢–µ–∫—Å—Ç—É—Ä–∞: ${data[0].texture_color}, ` : ``;
        let sizeInches = data[0].size_inches ? `–î—é–π–º–æ–≤: ${data[0].size_inches}, ` : ``;
        let sizeSm = data[0].size_sm ? `–°–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤: ${data[0].size_sm}, ` : ``;
        let innerAtribut = data[0].inner_atribut === null ? `–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ω–µ—Ç, ` : `–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${data[0].inner_atribut}, `;
        let printedText = data[0].printed_text === 'true' ? `–°–≤–æ–π —Ç–µ–∫—Å—Ç: –¥–∞, ` : `–°–≤–æ–π —Ç–µ–∫—Å—Ç: –Ω–µ—Ç, `;
        let madeIn = data[0].made_in ? `–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ: ${data[0].made_in} ` : ``;

        let price = data[0].price ? `<strong>üíµ –¶–µ–Ω–∞ (1—à—Ç):</strong> ${data[0].price} —Ä—É–±–ª–µ–π\n` : ``;

        // let color = data[0].color ? `<strong>–¶–≤–µ—Ç:</strong> ${}\n` : ``;
        // let pieces = data[0].pieces ? `<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${}\n` : ``;
        // let total = data[0].total ? `<strong>–°—É–º–º–∞:</strong> ${} —Ä—É–±–ª–µ–π\n` : ``;

        // for (let i = 0; i < data.length; i++) {
        //     let idBalloon = data[i].id_balloon >= 10 ? data[i].id_balloon : `${data[i].id_balloon}  `;
        //     let material = data[i].material;
        //     let formFactor = data[i].form_factor;
        //     let glue = data[i].glue ? '–¥–∞ ' : '–Ω–µ—Ç';
        //     let textureColor = data[i].texture_color.length > 3 ? data[i].texture_color.slice(0, 3) : data[i].texture_color;
        //     let color = data[i].color;
        //     let sizeInches = data[i].size_inches;
        //     let sizeSm = data[i].size_sm;
        //     let innerAtribut = data[i].inner_atribut ? "–¥–∞  " : "–Ω–µ—Ç";
        //     let numberFoil = data[i].number_foil;
        //     let printedText = data[i].printed_text;
        //     let madeIn = data[i].made_in;
        //     let price = data[i].price >= 100 ? data[i].price : ` ${data[i].price} `;
        //
        //     catalog += `|  ${idBalloon} | ${glue} | ${textureColor}  | ${sizeInches} | ${sizeSm} |  ${innerAtribut} | ${price} |\n`;
        // }
        let textMessage = selected + productInfo +
            "("+material + formFactor + glue+textureColor + sizeInches+sizeSm + innerAtribut + printedText + madeIn +")" +
            idBalloon +
            price
            // color +
            // pieces +
            // total
        ;
        return textMessage;
    } else {
        console.log("error: data == false (function makeString)")
    }
}






